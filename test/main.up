# To have functions from stdio.h, stdlib.h and math.h
# use libc

# dep.up depedency file
# use dep

# cdef nil printf(...)
# cdef num cosf(num a, int b, bool c)


# # Create function
# nil func(int a, num b)
#     a = b
#     b = 3.14
#     ret a + b * 6

# # $ means auto type
# $a = 42

# # num stands for floating point
# num b = -618.32

# # Booleans are set with yes or no
# bool c = yes
# $yesOrNo = no
# $x = 'I am a string'

# # Declare variable without initialization
# $nil c

# # Operations
# b = 8
# a += --b

# # Control flow
# a < b ?
#     printf('ok\n')

# while i > 88
#     printf('ok2\n')

# # TODO : down to
# # TODO : num as counter
# for i to b - a
#     printf('ok3 %d\n', i % 6)

# for i=a+b to b - a
#     printf('ok4\n')

# # Functions
# printf('Result : %f\n', cosf(3.14))

# a < b ?
#     $a = 42
#     $b = 58
# or a == b ?
#     $b = 42
# or
#     printf('false\n')

# b < a ?
#     printf('lol\n')


# TODO : Tests for types
# int iAmInt = 42
# int iAmInt2 = 422
# num iAmNum = 32
# num iAmNum2 = 322

# $v1 = iAmInt
# $v2 = v1
# $v2 = v1






# cdef str in()
# cdef nil out(str s)


# %{
#     // C code
#     #include <stdio.h>
#     #include <stdlib.h>

#     // !!! The input is not freed
#     char *in() {
#         char *s = malloc(100);
#         scanf("%99s", s);
#         return s
#     }

#     // Like puts
#     void out(const char *s) {
#         puts(s);
#     }
# %}


# $s = in()
# out(s)







# int var1 = 42
# $var2 = 32
# num var3 = 3.14
# num var4 = 1.618

# $a = 42 * 33 + 28
# $b = 42 + 33 * 28
# $c = (42 + 33) * 28


# $a = 42 + 42


# a += 314
# a *= 314
# $bool b
# b+=yes

use dir.dep

cdef nil Str.set()


int var = 42


